{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000\n});\nconst apiService = {\n  // Initialize canvas\n  initCanvas: async (width, height) => {\n    const response = await apiClient.post('/canvas/init', {\n      width,\n      height\n    });\n    return response.data;\n  },\n  // Add rectangle\n  addRectangle: async ({\n    x,\n    y,\n    width,\n    height,\n    color\n  }) => {\n    const response = await apiClient.post('/canvas/rectangle', {\n      x,\n      y,\n      width,\n      height,\n      color\n    });\n    return response.data;\n  },\n  // Add circle\n  addCircle: async ({\n    x,\n    y,\n    radius,\n    color\n  }) => {\n    const response = await apiClient.post('/canvas/circle', {\n      x,\n      y,\n      radius,\n      color\n    });\n    return response.data;\n  },\n  // Add text\n  addText: async ({\n    x,\n    y,\n    text,\n    font,\n    color\n  }) => {\n    const response = await apiClient.post('/canvas/text', {\n      x,\n      y,\n      text,\n      font,\n      color\n    });\n    return response.data;\n  },\n  // Add image via URL\n  addImageUrl: async ({\n    x,\n    y,\n    width,\n    height,\n    imageUrl\n  }) => {\n    const response = await apiClient.post('/canvas/image', {\n      x,\n      y,\n      width,\n      height,\n      imageUrl\n    });\n    return response.data;\n  },\n  // Add image via file upload\n  addImageFile: async ({\n    x,\n    y,\n    width,\n    height,\n    file\n  }) => {\n    const formData = new FormData();\n    formData.append('image', file);\n    formData.append('x', x);\n    formData.append('y', y);\n    formData.append('width', width);\n    formData.append('height', height);\n    const response = await apiClient.post('/canvas/image', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Export to PDF\n  exportToPDF: async () => {\n    const response = await apiClient.get('/export/pdf', {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n};\n\n// Add request interceptor for error handling\napiClient.interceptors.request.use(config => {\n  console.log(`Making ${config.method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor for error handling\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('Response error:', error);\n  if (error.response) {\n    // Server responded with error status\n    console.error('Error data:', error.response.data);\n    console.error('Error status:', error.response.status);\n  } else if (error.request) {\n    // Request was made but no response received\n    console.error('No response received:', error.request);\n  } else {\n    // Something else happened\n    console.error('Error message:', error.message);\n  }\n  return Promise.reject(error);\n});\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","timeout","apiService","initCanvas","width","height","response","post","data","addRectangle","x","y","color","addCircle","radius","addText","text","font","addImageUrl","imageUrl","addImageFile","file","formData","FormData","append","headers","exportToPDF","get","responseType","interceptors","request","use","config","console","log","method","toUpperCase","url","error","Promise","reject","status","message"],"sources":["/home/project/canva_frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n});\n\nconst apiService = {\n  // Initialize canvas\n  initCanvas: async (width, height) => {\n    const response = await apiClient.post('/canvas/init', { width, height });\n    return response.data;\n  },\n\n  // Add rectangle\n  addRectangle: async ({ x, y, width, height, color }) => {\n    const response = await apiClient.post('/canvas/rectangle', {\n      x, y, width, height, color\n    });\n    return response.data;\n  },\n\n  // Add circle\n  addCircle: async ({ x, y, radius, color }) => {\n    const response = await apiClient.post('/canvas/circle', {\n      x, y, radius, color\n    });\n    return response.data;\n  },\n\n  // Add text\n  addText: async ({ x, y, text, font, color }) => {\n    const response = await apiClient.post('/canvas/text', {\n      x, y, text, font, color\n    });\n    return response.data;\n  },\n\n  // Add image via URL\n  addImageUrl: async ({ x, y, width, height, imageUrl }) => {\n    const response = await apiClient.post('/canvas/image', {\n      x, y, width, height, imageUrl\n    });\n    return response.data;\n  },\n\n  // Add image via file upload\n  addImageFile: async ({ x, y, width, height, file }) => {\n    const formData = new FormData();\n    formData.append('image', file);\n    formData.append('x', x);\n    formData.append('y', y);\n    formData.append('width', width);\n    formData.append('height', height);\n\n    const response = await apiClient.post('/canvas/image', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // Export to PDF\n  exportToPDF: async () => {\n    const response = await apiClient.get('/export/pdf', {\n      responseType: 'blob',\n    });\n    return response.data;\n  },\n};\n\n// Add request interceptor for error handling\napiClient.interceptors.request.use(\n  (config) => {\n    console.log(`Making ${config.method.toUpperCase()} request to ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for error handling\napiClient.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    console.error('Response error:', error);\n    if (error.response) {\n      // Server responded with error status\n      console.error('Error data:', error.response.data);\n      console.error('Error status:', error.response.status);\n    } else if (error.request) {\n      // Request was made but no response received\n      console.error('No response received:', error.request);\n    } else {\n      // Something else happened\n      console.error('Error message:', error.message);\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}